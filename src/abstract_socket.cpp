/*
 * Copyright (C) 2013 Evidence Srl - www.evidence.eu.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "abstract_socket.hpp"

namespace net {

/**
 * @brief Read operation on the socket
 *
 * This function reads from the socket taking care of synchronization
 * with any other asynchronous operations.
 * @param buf Pointer where read data must be put
 * @param size Size of data to be read
 * @return Number of bytes actually read
 * @exception runtime_error in case of too small buffer
 *
 * Example of usage:
 * <code>
 * 		std::array<char, 5> buf;
 * 		AbstractSocket::read(net::buffer(b), 3);
 * </code>
 */
int AbstractSocket::read (struct __buffer buf, std::size_t size)
{
	if (buf.size_ == 0 || size > buf.size_){
		DEBUG(ERROR, "Wrong buffer size!");
		throw std::runtime_error ("Wrong buffer size");
	}
	read_lock_.lock();
	int ret = socket_->read(buf.ptr_, size);
	read_lock_.unlock();
	return ret;
}

/**
 * @brief Write operation on the socket
 *
 * This function writes to the socket taking care of synchronization
 * with any other asynchronous operations.
 * @param buf Pointer to data to be written
 * @param size Size of data to be written
 * @return Number of bytes actually written
 * @exception runtime_error in case of too small buffer
 *
 * Example of usage:
 * <code>
 * 		std::array<char, 5> buf;
 * 		AbstractSocket::write(net::buffer(b), 3);
 * </code>
 */
int AbstractSocket::write (struct __buffer buf, std::size_t size)
{
	if (buf.size_ == 0 || size > buf.size_){
		DEBUG(ERROR, "Wrong buffer size!");
		throw std::runtime_error ("Wrong buffer size");
	}
	write_lock_.lock();
	int ret = socket_->write(buf.ptr_, size);
	write_lock_.unlock();
	return ret;

}

}
