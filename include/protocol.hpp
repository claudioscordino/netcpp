/*
 * Copyright (C) 2013 Evidence Srl - www.evidence.eu.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef PROTOCOL_HPP_
#define PROTOCOL_HPP_

namespace net {

/**
 * @brief Protocol type
 */
enum class protocol_type {
	STREAM,	//< Stream (e.g., TCP) communications
	DGRAM	//< Dgram (e.g., UDP) communications
};

/**
 * @brief Protocol domain
 */
enum class protocol_domain {
	LOCAL,	//< Local (e.g., Unix) communications
	IPv4	//< IPv4 communications
};


/**
 * @brief Protocol used for the communication
 *
 * This class encapsulates information about type and domain of
 * the communication protocol.
 */
class protocol {
public:
	/**
	 * @brief Constructor
	 *
	 * @param type Protocol type (see net::protocol_type)
	 * @param domain Protocol domain (see net::protocol_domain)
	 */
	protocol (enum protocol_type type, 
	    enum protocol_domain domain):
		type_{type}, domain_{domain}{}

	/**
	 * @brief Get protocol type
	 *
	 * @return protocol type
	 */
	inline enum protocol_type getType() const
	{
		return type_;
	}

	/**
	 * @brief Get protocol domain
	 *
	 * @return protocol domain
	 */
	inline enum protocol_domain getDomain() const
	{
		return domain_;
	}

	/**
	 * @brief Operator ==
	 *
	 * @return true if protocols are equal; false otherwise
	 */
	inline bool operator==(const protocol& p) const 
	{
		if ((type_ == p.type_) && (domain_ == p.domain_))
			return true;
		return false;
	}

	/**
	 * @brief Operator !=
	 *
	 * @return false if protocols are equal; true otherwise
	 */
	inline bool operator!=(const protocol& p) const 
	{
		if ((type_ == p.type_) && (domain_ == p.domain_))
			return false;
		return true;
	}

private:
	/// Protocol type
	enum protocol_type type_;

	/// Protocol domain
	enum protocol_domain domain_;
};

static const net::protocol_type STREAM=net::protocol_type::STREAM;
static const net::protocol_type DGRAM=net::protocol_type::STREAM;
static const net::protocol_domain IPv4=net::protocol_domain::IPv4;
static const net::protocol_domain LOCAL=net::protocol_domain::LOCAL;

} // net

#endif // PROTOCOL_HPP_

