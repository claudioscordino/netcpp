/*
 * Copyright (C) 2013 Evidence Srl - www.evidence.eu.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ABSTRACT_SYSTEM_SOCKET_HPP_
#define ABSTRACT_SYSTEM_SOCKET_HPP_

#include <unistd.h>

#include "protocol.hpp"
#include "address.hpp"

namespace net {

/**
 * @brief Virtual class for platform-dependent code.
 *
 * This is the virtual class which every platform-dependent implementation must
 * inherit from.
 * The class offers a set of primitives which must be implemented by the concrete
 * derived classes.
 */
class AbstractSystemSocket {

public:
	/**
	 * \brief Method to read data from the socket.
	 *
	 * The buffer is filled with the read data.
	 * @param p buf Pointer to the memory address containing data
	 * @param size Number of bytes that must be read
	 * @return the number of bytes actually read; < 0 in case of error
	 */
	virtual int read (void* buf, size_t size)=0;
	
	/**
	 * \brief Method to write data to the socket.
	 *
	 * @param p buf Pointer to the memory address containing data
	 * @param size Number of bytes that must be written
	 * @return the number of bytes actually written; < 0 in case of error
	 */
	virtual int write (const void* buf, size_t size)=0;

	/**
	 * @brief Method to close the socket
	 *
	 * Note: currently there is no mechanism to re-open a closed socket.
	 * @return true in case of success; false otherwise
	 */
	virtual bool close()=0;
	
	/**
	 * @brief Method to accept a connection on a socket
	 *
	 * @param sock Pointer to the socket on which the new connection must be accepted.
	 * @exception runtime_error in case of error
	 */
	virtual void accept (AbstractSystemSocket* sock)=0;
	
	/**
	 * @brief Method to connect the socket to an address
	 *
	 * @param addr Address wich the socket must be connected to
	 * @exception runtime_error in case of error
	 */
	virtual void connect (const Address& addr)=0;
	
	/**
	 * @brief Method to bind the socket to an address
	 *
	 * @param addr Address wich the socket must be bound to
	 * @exception runtime_error in case of error
	 */
	virtual void bind (const Address& addr)=0;
	
	/**
	 * @brief Method to set the maximum number of pending connections
	 *
	 * This method allows to set the maximum number of pending connections for
	 * stream (e.g., TCP) communications.
	 * @param max_pending_connections Maximum number of pending connections
	 * @exception runtime_error in case of error or non-streamed communication
	 */
	virtual void listen (int max_pending_connections)=0;
	
	/**
	 * @brief Method to get the socket protocol
	 *
	 * This method returns the protocol, which has been set at socket creation
	 * (and cannot be changed).
	 * @return Protocol used by the socket
	 */
	protocol getProtocol() const {
		return protocol_;
	}

protected:	
	/**
	 * @brief Constructor
	 *
	 * The constructor is protected because only derived classes can
	 * use it.
	 * @param prot Protocol used by the socket
	 */
	AbstractSystemSocket(const protocol& prot):
		protocol_{prot}{};

	/**
	 * @brief Protocol used by the socket.
	 *
	 * This protocol is set during socket creation and cannot be changed.
	 */
	protocol protocol_;
};

} // net

#endif // ABSTRACT_SYSTEM_SOCKET_HPP_

