/*
 * Copyright (C) 2013 Evidence Srl - www.evidence.eu.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef ABSTRACT_SYSTEM_SOCKET_HPP_
#define ABSTRACT_SYSTEM_SOCKET_HPP_

#include <unistd.h>

#include "protocol.hpp"
#include "address.hpp"

namespace net {

class AbstractSystemSocket {

public:
	virtual int read (void* buf, size_t size)=0;
	virtual int write (const void* buf, size_t size)=0;
	virtual bool close()=0;
	virtual void accept (AbstractSystemSocket* sock)=0;
	virtual void connect (Address* addr)=0;
	virtual void bind (Address* addr)=0;
	virtual void listen (int max_pending_connections)=0;
	protocol getProtocol() const {
		return protocol_;
	}

protected:
	AbstractSystemSocket(const protocol& prot):
		protocol_{prot}{};

	protocol protocol_;
};

}


#endif // ABSTRACT_SYSTEM_SOCKET_HPP_

